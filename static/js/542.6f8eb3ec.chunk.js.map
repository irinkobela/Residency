{"version":3,"file":"static/js/542.6f8eb3ec.chunk.js","mappings":"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","sources":["components/ReviewDeck.js","components/QuestionView.js"],"sourcesContent":["// src/components/ReviewDeck.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useShortcuts } from '../contexts/ShortcutContext';\nimport QuestionView from './QuestionView';\nimport './ReviewDeck.module.css';\n\nconst ReviewDeck = ({\n  questions,\n  incorrectlyAnsweredQuestions,\n  onAnswerResult,\n  onBackToQuiz,\n  showExplanation,\n  toggleExplanation,\n  clearIncorrectlyAnsweredQuestions,\n}) => {\n  const { shortcutPrev, shortcutNext, shortcutExplanation } = useShortcuts();\n\n  const [reviewQueue, setReviewQueue] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [hasAnsweredCurrentQuestion, setHasAnsweredCurrentQuestion] = useState(false); // <--- ADD THIS\n  const [isShowingFeedbackDelay, setIsShowingFeedbackDelay] = useState(false);     // <--- ADD THIS\n\n  // Reset review queue and flags when component mounts or relevant props change\n  useEffect(() => {\n    const initialQueue = questions.filter(q => incorrectlyAnsweredQuestions.includes(q.id));\n    setReviewQueue(initialQueue);\n    setCurrentIndex(0);\n    setHasAnsweredCurrentQuestion(false); // Reset for a new queue\n    setIsShowingFeedbackDelay(false); // Reset feedback flag\n  }, [questions, incorrectlyAnsweredQuestions]);\n\n  // Function to move to the next question (after feedback delay)\n  const advanceToNextQuestion = useCallback(() => {\n    setHasAnsweredCurrentQuestion(false); // Hide feedback before moving to next\n    setIsShowingFeedbackDelay(false); // Reset delay flag\n    if (currentIndex < reviewQueue.length - 1) {\n      setCurrentIndex(prev => prev + 1);\n    } else {\n      setCurrentIndex(0); // Loop back for continuous review, or handle completion\n    }\n  }, [currentIndex, reviewQueue.length]);\n\n  // Function to move to the previous question (after feedback delay)\n  const goToPreviousQuestion = useCallback(() => {\n    setHasAnsweredCurrentQuestion(false); // Hide feedback before moving to previous\n    setIsShowingFeedbackDelay(false); // Reset delay flag\n    if (currentIndex > 0) {\n      setCurrentIndex(prev => prev - 1);\n    } else {\n      setCurrentIndex(0); // Stay at the first question\n    }\n  }, [currentIndex]);\n\n\n  // This is the callback that QuestionView will trigger when an answer button is clicked.\n  const handleAnswerClickFromQuestionView = useCallback((questionId, isCorrect) => {\n    if (isShowingFeedbackDelay) return; // Prevent multiple clicks during delay\n\n    setHasAnsweredCurrentQuestion(true); // Mark current question as answered for feedback display\n    setIsShowingFeedbackDelay(true); // Start the feedback delay\n\n    // Notify the parent component about the answer result\n    if (onAnswerResult) {\n      onAnswerResult(questionId, isCorrect);\n    }\n\n    // After a short delay, update the review queue based on correctness\n    setTimeout(() => {\n      let newIndex = currentIndex;\n      let newQueue = [...reviewQueue];\n\n      if (isCorrect) {\n        // If correct, remove the question from the queue\n        newQueue = reviewQueue.filter(q => q.id !== questionId);\n        // Adjust index if the current question was removed and it was the last one\n        newIndex = Math.min(currentIndex, newQueue.length - 1);\n      } else {\n        // If incorrect, move it to the end of the queue for re-review\n        const questionToMove = reviewQueue[currentIndex];\n        newQueue = reviewQueue.filter(q => q.id !== questionId);\n        if (questionToMove) { // Ensure the question exists before re-adding\n          newQueue.push(questionToMove);\n        }\n        newIndex = (currentIndex + 1) % newQueue.length; // Move to next, looping if needed\n      }\n\n      setReviewQueue(newQueue);\n      setCurrentIndex(newIndex);\n      setHasAnsweredCurrentQuestion(false); // Reset for the next question that will load\n      setIsShowingFeedbackDelay(false); // End the feedback delay\n    }, 1500); // 1.5-second delay to show feedback before moving\n  }, [currentIndex, onAnswerResult, reviewQueue, isShowingFeedbackDelay]);\n\n\n  const handleBackToQuiz = useCallback(() => {\n    if (clearIncorrectlyAnsweredQuestions) {\n      clearIncorrectlyAnsweredQuestions();\n    }\n    onBackToQuiz();\n  }, [clearIncorrectlyAnsweredQuestions, onBackToQuiz]);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.target.tagName.toLowerCase() === 'input') {\n        return;\n      }\n      // Only allow navigation if not currently in a feedback delay\n      if (!isShowingFeedbackDelay) {\n        if (e.key === shortcutNext) {\n          e.preventDefault();\n          advanceToNextQuestion();\n        }\n        if (e.key === shortcutPrev) {\n          e.preventDefault();\n          goToPreviousQuestion();\n        }\n      }\n      // Explanation toggle still works regardless of feedback delay\n      if (e.key === shortcutExplanation || (shortcutExplanation === ' ' && e.code === 'Space')) {\n        e.preventDefault(); // Prevent spacebar from scrolling\n        toggleExplanation();\n      }\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        handleBackToQuiz();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [\n    shortcutPrev,\n    shortcutNext,\n    shortcutExplanation,\n    advanceToNextQuestion,\n    goToPreviousQuestion,\n    toggleExplanation,\n    handleBackToQuiz,\n    isShowingFeedbackDelay // Dependency for disabling navigation\n  ]);\n\n  if (reviewQueue.length === 0) {\n    return (\n      <div className=\"review-deck-container\">\n        <h2>✨ გილოცავთ!</h2>\n        <p>თქვენ წარმატებით უპასუხეთ ყველა მანამდე შეცდომით ნაპასუხებ კითხვას.</p>\n        <button onClick={handleBackToQuiz}>🔙 დაბრუნება სწავლის რეჟიმზე</button>\n      </div>\n    );\n  }\n\n  const currentQuestion = reviewQueue[currentIndex];\n\n  return (\n    <div className=\"review-deck-container\">\n      <h2>🧠 \"დამხეცების\" რეჟიმი ({reviewQueue.length} კითხვა დარჩა)</h2>\n      <QuestionView\n        // Key is important to force QuestionView to re-render when the question object *or*\n        // the feedback state changes, ensuring its internal state resets.\n        key={currentQuestion.id + (hasAnsweredCurrentQuestion ? '_answered' : '_unanswered')}\n        question={currentQuestion}\n        onAnswerResult={handleAnswerClickFromQuestionView} // Pass our new wrapper function\n        // Pass showExplanation prop to QuestionView. It will be true if the parent wants it,\n        // OR if the current question has just been answered (to force feedback display).\n        showExplanation={showExplanation || hasAnsweredCurrentQuestion} // <--- Use this to force explanation\n        toggleExplanation={toggleExplanation}\n        alwaysShowCorrectAnswer={true} // Inform QuestionView that it should always show feedback when isAnswered\n        isForcedAnswered={hasAnsweredCurrentQuestion} // <--- Pass NEW PROP from ReviewDeck to QuestionView\n      />\n      <div className=\"navigation\">\n        <button onClick={goToPreviousQuestion} disabled={currentIndex === 0 || isShowingFeedbackDelay}>\n          ◀️ წინა\n        </button>\n        <button onClick={advanceToNextQuestion} disabled={currentIndex === reviewQueue.length - 1 || isShowingFeedbackDelay}>\n          ▶️ შემდეგი\n        </button>\n        <button onClick={handleBackToQuiz} disabled={isShowingFeedbackDelay}>🔙 დაბრუნება სწავლის რეჟიმზე</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ReviewDeck;","// src/components/QuestionView.js\nimport React, { useState, useEffect, memo, useRef } from 'react';\nimport './QuestionView.css';\n\nconst QuestionView = ({\n  question,\n  onAnswerResult,\n  showExplanation,\n  toggleExplanation,\n  alwaysShowCorrectAnswer,\n  isForcedAnswered,\n}) => {\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isAnswered, setIsAnswered] = useState(isForcedAnswered || false);\n  const explanationRef = useRef(null);\n  const questionRef = useRef(null); // <--- NEW: Ref for the question card itself\n\n  useEffect(() => {\n    // Reset internal state when question changes OR when isForcedAnswered changes\n    setSelectedAnswer(null);\n    setIsAnswered(isForcedAnswered || false);\n\n    // <--- NEW: Scroll to the top of the question when a new question is loaded\n    if (questionRef.current) {\n      questionRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start' // Scrolls the top of the element to the top of the viewport\n      });\n    }\n  }, [question, isForcedAnswered]); // Added question to dependencies to trigger on question change\n\n  useEffect(() => {\n    // Explanation visibility logic considering both external showExplanation and internal isAnswered state\n    // AND the new alwaysShowCorrectAnswer (if the component uses it for display)\n    const shouldScroll = (showExplanation || (isAnswered && alwaysShowCorrectAnswer)) && explanationRef.current;\n    if (shouldScroll) {\n      explanationRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  }, [showExplanation, isAnswered, alwaysShowCorrectAnswer]);\n\n  const handleAnswerClick = (answer) => {\n    // If feedback is already showing (either by user click or by force), prevent re-clicking\n    if (isAnswered) return;\n    setSelectedAnswer(answer);\n    setIsAnswered(true); // Set QuestionView's internal state to answered\n    if (onAnswerResult) {\n      onAnswerResult(question.id, answer.isCorrect); // Pass result up to parent\n    }\n  };\n\n  const handleToggleExplanation = (e) => {\n    e.stopPropagation();\n    // Only allow manual toggle if explanation is not meant to be always shown by default\n    // and if it's not currently forced answered.\n    if (!alwaysShowCorrectAnswer && !isForcedAnswered) {\n      toggleExplanation();\n    }\n  };\n\n  const getButtonClassName = (answer) => {\n    // If the question is in an 'answered' state (either by user click or forced)\n    if (isAnswered) {\n      if (answer.isCorrect) {\n        return \"answer-button correct\"; // Always highlight correct if answered\n      }\n      // If the user picked this specific answer AND it was incorrect\n      if (selectedAnswer === answer && !answer.isCorrect) {\n        return \"answer-button incorrect\";\n      }\n      // If the question is forced answered, but this specific answer wasn't picked (and isn't correct),\n      // it just gets the default style. The correct one is handled above.\n    }\n    return \"answer-button\"; // Default style if not answered or not incorrect\n  };\n\n  // Find the correct answer text for display\n  const correctAnswerText = question.answers.find(a => a.isCorrect)?.text;\n\n  // Determine if explanation sections should be rendered\n  const shouldShowFeedbackSections = isAnswered || isForcedAnswered;\n\n  return (\n    // <--- NEW: Attach the questionRef to the main question-card div\n    <div className=\"question-card\" ref={questionRef}>\n      <h2 className=\"question-text\">❓ {question.question}</h2>\n      <div className=\"answers-container\">\n        {question.answers.map((answer, index) => (\n          <button\n            key={index}\n            className={getButtonClassName(answer)}\n            onClick={() => handleAnswerClick(answer)}\n            disabled={isAnswered} // Disable if already answered (internally or forced)\n          >\n            {answer.text}\n          </button>\n        ))}\n      </div>\n\n      {shouldShowFeedbackSections && (\n        <div className=\"correct-answer-section\">\n          <p className=\"correct-answer-text\">\n            ✅ სწორი პასუხია: <strong>{correctAnswerText}</strong>\n          </p>\n        </div>\n      )}\n\n      {shouldShowFeedbackSections && (\n        <div className=\"explanation-section\" ref={explanationRef}>\n          {/* Only show toggle button if NOT in alwaysShowCorrectAnswer mode AND not forced answered */}\n          {!alwaysShowCorrectAnswer && !isForcedAnswered && (\n            <button className=\"explanation-toggle\" onClick={handleToggleExplanation}>\n              {showExplanation ? '🙈 ახსნის დამალვა' : '📖 ახსნის ნახვა'}\n            </button>\n          )}\n          {/* Explanation content visibility depends on showExplanation prop passed from parent\n              OR if it's forced answered and alwaysShowCorrectAnswer is true. */}\n          {(showExplanation || (isAnswered && alwaysShowCorrectAnswer) || isForcedAnswered) && (\n            <p className=\"explanation-text\">ℹ️ {question.explanation}</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(QuestionView);\n"],"names":["_ref","questions","incorrectlyAnsweredQuestions","onAnswerResult","onBackToQuiz","showExplanation","toggleExplanation","clearIncorrectlyAnsweredQuestions","shortcutPrev","shortcutNext","shortcutExplanation","useShortcuts","reviewQueue","setReviewQueue","useState","currentIndex","setCurrentIndex","hasAnsweredCurrentQuestion","setHasAnsweredCurrentQuestion","isShowingFeedbackDelay","setIsShowingFeedbackDelay","useEffect","initialQueue","filter","q","includes","id","advanceToNextQuestion","useCallback","length","prev","goToPreviousQuestion","handleAnswerClickFromQuestionView","questionId","isCorrect","setTimeout","newIndex","newQueue","Math","min","questionToMove","push","handleBackToQuiz","handleKeyDown","e","target","tagName","toLowerCase","key","preventDefault","code","window","addEventListener","removeEventListener","_jsxs","className","children","_jsx","onClick","currentQuestion","QuestionView","question","alwaysShowCorrectAnswer","isForcedAnswered","disabled","_question$answers$fin","selectedAnswer","setSelectedAnswer","isAnswered","setIsAnswered","explanationRef","useRef","questionRef","current","scrollIntoView","behavior","block","getButtonClassName","answer","correctAnswerText","answers","find","a","text","shouldShowFeedbackSections","ref","map","index","handleAnswerClick","stopPropagation","explanation","memo"],"sourceRoot":""}